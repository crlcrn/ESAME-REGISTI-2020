from database.DB_connect import DBConnect
from model.Directors import Directors


class DAO():
    def __init__(self):
        pass

    @staticmethod
    def getAllDirectors(anno):

        conn = DBConnect.get_connection()

        result = []

        cursor = conn.cursor(dictionary=True)
        query =  """select distinct d.*
                    from directors d , movies_directors md , movies m 
                    where m.`year` = %s and md.director_id = d.id and md.movie_id = m.id 
                 """


        cursor.execute(query, (anno, ))

        for row in cursor:
            result.append(Directors(**row))

        cursor.close()
        conn.close()
        return result

    @staticmethod
    def getAllNodi(year):

        conn = DBConnect.get_connection()

        result = []

        cursor = conn.cursor(dictionary=True)
        query =  """ SELECT d.id, d.first_name, d.last_name 
        FROM directors d, movies_directors md, movies m 
        WHERE m.year = %s AND d.id = md.director_id AND md.movie_id = m.id 
        GROUP BY d.id, d.first_name, d.last_name 
        HAVING COUNT(m.id) > 0
        
        """
        cursor.execute(query, (year, ))

        for row in cursor:
            result.append((row['id'], row['first_name'], row['last_name']))

        cursor.close()
        conn.close()
        return result

    @staticmethod
    def getEdges(anno):

        conn = DBConnect.get_connection()

        result = []

        cursor = conn.cursor(dictionary=True)
        query =  """  SELECT 
            md1.director_id AS director1,
            md2.director_id AS director2,
            COUNT(DISTINCT r1.actor_id) AS shared_actors
        FROM 
            roles r1, roles r2, movies m1, movies m2, movies_directors md1, movies_directors md2
        WHERE 
            r1.movie_id = m1.id AND
            r2.movie_id = m2.id AND
            m1.id = md1.movie_id AND
            m2.id = md2.movie_id AND
            r1.actor_id = r2.actor_id AND
            m1.year = %s AND
            m2.year = %s AND
            md1.director_id < md2.director_id
        GROUP BY 
            md1.director_id, md2.director_id
        HAVING 
            shared_actors > 0
        """
        cursor.execute(query, (anno, anno,  ))

        for row in cursor:
            result.append((row['director1'], row['director2'], row['shared_actors']))

        cursor.close()
        conn.close()
        return result

